#Test with: http://editor.swagger.io/

swagger: '2.0'
info:
  version: 1.0.0
  title: Microservice for Courses
  description: Ruby On Rails + PostgreSQL
  license:
    name: Software Architecture 2019-I
host: 192.168.99.109:4004
basePath: "/"
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /tags:
    post:
      summary: Creates a new tag
      operationId: createTag
      parameters:
        - name: tag
          in: body
          required: true
          description: Tag Object
          schema:
            $ref: '#/definitions/TagInput'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/Tag'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'
    get:
      summary: Returns all tags
      operationId: getAllTags
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/TagsList'
        '406':
          description: Not Acceptable (Invalid Params)
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'

  /tags/id:
    get:
      summary: Returns a tag with the given code
      operationId: getTagByCode
      parameters:
        - name: code
          in: path
          description: The code of the course to be returned
          required: true
          type: integer
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/Tag'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorModel'
        '406':
          description: Not Acceptable (Invalid Params)
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'

    put:
      summary: Updates a tag with the given code
      operationId: updateTag
      parameters:
        - name: code
          in: path
          description: The code of the tag to be updated
          required: true
          type: integer
        - name: tag
          in: body
          required: true
          description: Tag Object
          schema:
            $ref: '#/definitions/TagInput'
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/Tag'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorModel'
        '406':
          description: Not Acceptable (Invalid Params)
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'

    delete:
      summary: Deletes a tag with the given id
      operationId: deleteTag
      parameters:
        - name: code
          in: path
          description: The code of the tag to be deleted
          required: true
          type: integer
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/TagCode'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorModel'
        '406':
          description: Not Acceptable (Invalid Params)
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
  /luggages:
    post:
      summary: Creates a new luggage
      operationId: createLuggage
      parameters:
        - name: luggage
          in: body
          required: true
          description: Luggage Object
          schema:
            $ref: '#/definitions/LuggageInput'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/Luggage'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'
    get:
      summary: Returns all luggages
      operationId: getAllLuggages
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/LuggagesList'
        '406':
          description: Not Acceptable (Invalid Params)
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'

  /luggages/id:
    get:
      summary: Returns a luggage with the given code
      operationId: getLuggageByCode
      parameters:
        - name: code
          in: path
          description: The code of the course to be returned
          required: true
          type: integer
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/Luggage'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorModel'
        '406':
          description: Not Acceptable (Invalid Params)
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'

    put:
      summary: Updates a Luggage with the given code
      operationId: updateLuggage
      parameters:
        - name: code
          in: path
          description: The code of the tag to be updated
          required: true
          type: integer
        - name: tag
          in: body
          required: true
          description: Tag Object
          schema:
            $ref: '#/definitions/LuggageInput'
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/Luggage'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorModel'
        '406':
          description: Not Acceptable (Invalid Params)
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'

    delete:
      summary: Deletes a luggage with the given id
      operationId: deleteLuggage
      parameters:
        - name: code
          in: path
          description: The code of the luggage to be deleted
          required: true
          type: integer
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/LuggageCode'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorModel'
        '406':
          description: Not Acceptable (Invalid Params)
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
definitions:

  # Tags
  Tag:
    type: object
    properties:
      passenger_id:
        type: integer
      cabin_id:
        type: string

  TagInput:
    type: object
    properties:
      passenger_id:
        type: integer
      cabin_id:
        type: string
        
  TagsList:
    type: object
    required:
      - total
      - list
    properties:
      total:
        type: number
      list:
        type: array
        items:
          $ref: '#/definitions/Tag'
  
  TagCode:
    type: object
    properties:
      code:
        type: integer
  
  # Luggages
  Luggage:
    type: object
    properties:
      weight:
        type: integer
      status:
        type: integer

  LuggageInput:
    type: object
    properties:
      weight:
        type: integer
      status:
        type: integer
        
  LuggagesList:
    type: object
    required:
      - total
      - list
    properties:
      total:
        type: number
      list:
        type: array
        items:
          $ref: '#/definitions/Luggage'
  
  LuggageCode:
    type: object
    properties:
      code:
        type: integer
        
# Errors
  ErrorModel:
    type: object
    required:
      - message
      - code
    properties:
      message:
        type: string
      code:
        type: number
      description:
        type: object
